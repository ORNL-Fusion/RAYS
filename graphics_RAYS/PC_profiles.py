#! /usr/bin/env python

"""
PC_profiles.py -> Plot and compare netCDF files containing profiles from RAYS

This code reads CDF file/files and plots 1D profiles as produced by the RAYS code.  It
is essentially a rewrite of the PCMF.py code (i.e. Plot Compare Monitor files) from the
SWIM project.  The first step in rewrite is to substitute "monitor" -> "CDF", and
'time' -> "profile".  It reads one or more netCDF files generated by the post_process_m
module and produces profile plots which are written to a .pdf file.

(i.e. first dimension
is 'timeDim').  Scalars are plotted as functions of time.  Profiles are plotted as functions
of rho for selected time points.  All the plots are written into a multipage pdf document.  Each
profiable is plotted on a separate page.  There are summary pages of the global CDF file
attributes at the beginning of the document, and there is in index of all plots at the end of the
document.

The code takes one command-line argument -> either a  CDF file name with extension ".nc"
or a configuration file with extension ".config".

If the file is a CDF file this code plots the scalars as functions of time (one profiable
per plot) and profiles as functions of rho for a set of time points. There are n_time_points
(see parameter below) one curve per time point that are approximately evenly spaced in time.

If the file is a configuration file you can specify a group of CDF files to be read and
compared.  Scalars and profiles are plotted with one curve from each CDF file, one
profiable per page.  Profiles at different time points are plotted on different pages.  The
configiruation file allows you to specify other plot parameters (see discussion below).  You
can also specify a single CDF file in the config file and control the other plot
paramaters for that.

The configuration file is read by simple_config.py. It must contain: CDF_FiLE_NAMES and
TIME_POINT_MODE.

It can optionally contain: PLOT_FILE_NAME, CDF_FILE_DIR, CURVE_LABELS

CDF_FiLE_NAMES = The names of the CDF files to be plotted.  It can consist of a single
CDF file or a list of multiple CDF files.  For profile plot pages the curve labels are
different depending on whether a single file or list of files is being plotted.  If a single
CDF file is given, curves for each of the specified time points are plotted on the page
for each profiable.  If a list of CDF files is given, curves for each of the CDF files
are plotted on the page, with the profious time points on separate pages.

Optional parameters are:

PLOT_FILE_NAME = Name of .pdf file where plots go.  If omitted and CDF_FiLE_NAMES is a
single file, the CDF file name (minus .nc extension) is used (e.g. <CDF_file>.pdf).
If omitted and CDF_FiLE_NAMES is a list of CDF files, the config file name (minus .config
extension) is used (e.g. <config_file>.pdf).

CDF_FILE_DIR = path (unix style) to a directory containing the CDF files.  If omitted
the CDF files are assumed to be in the current working directory.

CURVE_LABELS = A space delimited list of labels to subsitute for file names when plotting
profiles for a list of CDF files.  When plotting profiles for a list of CDF files the
default labels for the curves are the names of the corresponding CDF files. However this
probably doesn't describe the differences in the simulation runs very well. So you can optionally
provide this list of substitute curve lables. There must be a one-to-one mapping between the
labels and the CDF file names.

This script requires external modules:
    netCDF4
    plt_XY_curves - which also requires matplotlib
    simple_config

change log:
 2/27/2024
 version 1.0

"""

import sys
import os

from plt_XY_Curves import *
from simple_config import *
from netCDF4 import *

debug = True

#----------------------------------------------------------------------------------------------
# Utility functions
#----------------------------------------------------------------------------------------------

# None so far

#----------------------------------------------------------------------------------------------
# Set up
#----------------------------------------------------------------------------------------------

# get the command line -> .config or .nc file name
if len(sys.argv) != 2:
    print(' sys.argv = ', sys.argv)
    print('Usage: this script takes one command line argument -> a CDF\
           or config file name')
    raise Exception('Usage: this script takes one command line argument -> a CDF\
           or config file name')

# get the configuration -> plot file name, CDF files to compare + other stuff
if sys.argv[1][-7:] == '.config':
    config_file_name = sys.argv[1]
    config = simple_config(config_file_name)

    # Get the CDF file names and CDF file directory path if provided
    CDF_file_names = config.CDF_FILE_NAMES
    CDF_file_dir = os.getcwd()
    try:
        CDF_file_dir = config.CDF_FILE_DIR
    except Exception:
        print('No CDF_FILE_DIR provided. Using current working directory')

    # Determine if CDF_file_names is a single file (i.e. a string) or a list
    if type(CDF_file_names) == str:
        single_file = True
        CDF_file_names = [CDF_file_names]   # Make it into a length 1 list

    elif type(CDF_file_names) == list:
        single_file = False

        # Generate a list of lables for the curves indicating which CDF file goes with which curve.
        curve_labels = CDF_file_names       # Default is to use the file names.

        # If a list of curve labels is provided use that instead.
        curve_label_dict = {}
        try:
            curve_labels = config.CURVE_LABELS
            for i in range( len(CDF_file_names) ):
                curve_label_dict[ CDF_file_names[i] ] = curve_labels[i]
        except Exception:
            print('No labels provided.  Using file names')
            for i in range( len(CDF_file_names) ):
                curve_label_dict[ CDF_file_names[i] ] = CDF_file_names[i][: -3]

    # Get plot file name and open file for plotting
    try:
        plot_file_name = config.PLOT_FILE_NAME + '.pdf'
        given_plot_file_name = True
        print('plot_file_name = ', plot_file_name)
        if plot_file_name.strip() == '.pdf':    # PLOT_FILE_NAME parameter is present but blank
            given_plot_file_name = False
    except Exception:
        given_plot_file_name = False

    if given_plot_file_name == False:   # Generate default plot_file_name
        if single_file:
            plot_file_name = CDF_file_names[0].partition('.nc')[0] + '.pdf'
        else:
            plot_file_name = config_file_name.partition('.config')[0] + '.pdf'
        print('No plot_file_name provided.  Using default name = ', plot_file_name)

# If single CDF file, define CDF_file_names list
elif sys.argv[1][-3:] == '.nc':
    CDF_file_names = [ sys.argv[1] ]
    CDF_file_dir = os.getcwd()
    single_file = True
    plot_file_name = CDF_file_names[0][:-3] + '.pdf'
    print('plot_file_name = ', plot_file_name)

else:
    print('Unrecognized cammand line argument.  Should be a .nc or .config file')
    raise exception('Unrecognized cammand line argument.  Should be a .nc or .config file')

open_file_XY_Curves_Fig(plot_file_name)

all_CDF_files_dict = {}
all_CDF_prof_names = []  # List of profles in all files

scalar_names = []
profile_names = []
dimensions_dict = {}
index = []
plot_count = 0


for file in CDF_file_names:
    print('Processing CDF file ', file)
    full_path = os.path.join(CDF_file_dir, file)
    CDF = Dataset(full_path, 'r', format = 'NETCDF3_CLASSIC')

    plot_count = plot_count +1
    CDF_dim_names = list(CDF.dimensions.keys())
    CDF_dims = CDF.dimensions
    CDF_var_names = list(CDF.variables.keys())
    print('***** CDF_dim_names = ' , CDF_dim_names)
    print('***** CDF_dims = ' , CDF_dims)
    print('***** CDF_var_names = ' , CDF_var_names)
    print('***** CDF.variables = ' , CDF.variables)
    print('***************')
    print('***** CDF.variables = ' , CDF.variables['Q_sum'][0])
    
    n_profiles = CDF.dimensions['n_profiles'].size
    print('***** n_profiles = ' , n_profiles)

    # Compile list of all profiles in all files. Add new profile first time it appears.
    # Determine if scalar or profile.  Record profiable dimensions.
    for i in list(range(n_profiles)):
        prof_name_i = str(CDF.variables['profile_name'][i],'utf-8')
        profile_i = CDF.variables['profile'][i]
        gridname_i= str(CDF.variables['grid_name'][i],'utf-8')
        grid_i = CDF.variables['grid'][i]
        print('***** prof_name_i = ' , prof_name_i)
        print('***** profile_i = ' , profile_i)
        print('***** gridname_i = ' , gridname_i)
        print('***** grid_i = ' , grid_i)
        
        if prof_name_i not in all_CDF_prof_names:
            all_CDF_prof_names.append(prof_name_i)
            prof_grid = CDF.variables['grid'][i]

    # Global attributes defined in this CDF file
    RAYS_run_label = CDF.RAYS_run_label
    date_vector = list(CDF.date_vector)

    global_attributes = [ ['CDF file = ', file],\
                          ['RAYS_run_label label = ', RAYS_run_label]]

#     global_attributes = [ ['CDF file = ', file],\
#                           ['RAYS_run_label label = ', RAYS_run_label], \
#                           ['date_vector = ', date_vector] ]

    if debug:
        print(' ')
        CDF_dim_names.sort()
        print('CDF_dims = ', CDF_dim_names)
        print(' ')
        #CDF_dims.sort()
        print('CDF_dims = ', CDF_dims)
        print(' ')
        CDF_var_names.sort()
        print('CDF_prof_names = ', CDF_var_names)

    summary ={'file_name':file , 'global_attributes': global_attributes}
    print('\n************ summary = ',summary)
    plot_summary(summary)

    index.append([plot_count, file])

    # Get time points for this CDF file
    profile_name = str(CDF.profiles['profile_name'][:], encoding='utf-8')
    print('profile_name = ', profile_name)

    this_CDF_file_dict = {'profile_name': profile_name,\
                              'profiles': CDF_var_names, 'file': CDF}
    all_CDF_files_dict[file] = this_CDF_file_dict


#----------------------------------------------------------------------------------------------
# Plot all profiles vs grid
#----------------------------------------------------------------------------------------------
print('Plotting profiles \n')

if sys.argv[1][-7:] == '.config':

    for prof_name in profile_names:
        if debug:
            print('prof_name = ', prof_name)
    
        xlabel = 'rho'
        ylabel = prof_name
        units = dimensions_dict[prof_name]
        if units != ' ' and units != '':
            ylabel = prof_name + ' (' + units + ') '
    
        # skip rlim and zlim since they aren't profiles
        if prof_name == 'rlim' or prof_name == 'zlim':
            continue
        if debug:
            print('prof_name = ', prof_name)

    curve_list = []

    # Add a plot of this profiable for each time point
    for i in time_point_indices:

        #Generate title
        title = prof_name
        if not single_file:
            time_label = 't = ' + str(time[i])
            title = prof_name + '    ' + time_label


        # Add a curve from each CDF file that contains this profiable
        if not single_file:
            curve_list = []
        for file_name in CDF_file_names:
            this_CDF_file_dict = all_CDF_files_dict[file_name]
            CDF = this_CDF_file_dict['file']
            profiles = this_CDF_file_dict['profiles']

            # Check if prof_name is in this CDF file.
            if prof_name in profiles:
                prof = CDF.profiles[prof_name]
                y = prof[:]

                if debug:
                    print(ylabel)
                    print('type(', prof, ') = ', type(y))
                    print(prof, ' = ', y)

                # Get the grid profiable from the dimension name
                # Also determine if this is a zone based grid, indicated by prefix "dm1_n', if so
                # delete the "dm1_n" and append "_zone" so we can find it
                grid_name = prof.dimensions[1]
                if grid_name[0:5] == 'dm1_n':
                    grid_name = grid_name[5:] + '_zone'
                    grid = CDF.profiles[grid_name][:]
                elif grid_name[0:5] == 'dim_n':
                    grid_name = grid_name[5:]
                    grid = CDF.profiles[grid_name][:]
                else:
                    message = 'This dimension name -> ' + grid_name + ' does not correspond to a grid'
                    print(message)
                    raise Exception(message)

                if debug:
                    print('grid = ', grid)

                if single_file:
                    lbl = 't = ' + str(time[i])
                    curve_list.append( XY_curve(grid, y[i], label = lbl))
                else:
                    curve_list.append( XY_curve(grid, y[i], label = curve_label_dict[file_name]) )

        if not single_file:     # Generate the plot just outside the file_name loop
            plot1 = XY_Curves_Fig(curve_list, title, xlabel, ylabel)
            plot_XY_Curves_Fig(plot1)
            plot_count = plot_count + 1
            index.append([plot_count, title])

    if single_file:     # Generate the plot just outside the time_point_indices loop
        plot1 = XY_Curves_Fig(curve_list, title, xlabel, ylabel)
        plot_XY_Curves_Fig(plot1)
        plot_count = plot_count + 1
        index.append([plot_count, title])

#----------------------------------------------------------------------------------------------
# Finalize
#----------------------------------------------------------------------------------------------

plot_index(index, 1)

close_file_XY_Curves_Fig()

if debug:
    print('index = ', index)