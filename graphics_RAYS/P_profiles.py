#! /usr/bin/env python

"""
PC_profiles.py -> Plot and compare netCDF files containing profiles from RAYS

This code reads CDF file and plots 1D profiles as produced by the RAYS code.   It reads a
netCDF files generated by the post_process_m module and produces profile plots which are
written to a .pdf file.

The code takes one command-line argument -> a  CDF file path, expected extension is ".nc"


This script requires external modules:
    netCDF4
    plt_XY_curves - which also requires matplotlib
    numpy

change log:
 2/27/2024
 version 1.0

"""

import sys
import os
import numpy as np
import numpy.ma as ma

from plt_XY_Curves import *
from netCDF4 import *

debug = True

#----------------------------------------------------------------------------------------------
# Utility functions
#----------------------------------------------------------------------------------------------

# None so far

#----------------------------------------------------------------------------------------------
# Set up
#----------------------------------------------------------------------------------------------

# get the command line -> .config or .nc file name
if len(sys.argv) != 2:
    print(' sys.argv = ', sys.argv)
    message = 'Usage: this script takes one command line argument -> a CDF file path'
    print(message)
    raise Exception(message)

# Get CDF file name andx generate plot file name
CDF_file_name = sys.argv[1]
if sys.argv[1][-3:] == '.nc':
    plot_file_name = CDF_file_name[:-3] + '.pdf'
    print('plot_file_name = ', plot_file_name)
else:
    print('Unrecognized cammand line argument.  Should be a .nc or .config file')
    raise exception('Unrecognized cammand line argument.  Should be a .nc or .config file')

open_file_XY_Curves_Fig(plot_file_name)

all_CDF_files_dict = {}
all_CDF_prof_names = []  # List of profles in all files

profile_names = []
profile_dict = {}
grid_names_dict ={}
grid_dict = {}
index = []
plot_count = 0


print('Processing CDF file ', CDF_file_name)
CDF = Dataset(CDF_file_name, 'r', format = 'NETCDF3_CLASSIC')

CDF_dim_names = list(CDF.dimensions.keys())
CDF_dims = CDF.dimensions
CDF_var_names = list(CDF.variables.keys())
# print('***** CDF_dim_names = ' , CDF_dim_names)
# print('***** CDF_dims = ' , CDF_dims)
# print('***** CDF_var_names = ' , CDF_var_names)
# print('***** CDF.variables = ' , CDF.variables)
# print('***************')
# print('***** CDF.variables = ' , CDF.variables['Q_sum'][0])

n_profiles = CDF.dimensions['n_profiles'].size
print('n_profiles = ' , n_profiles)

for i in list(range(n_profiles)):
    profile_name = str(CDF.variables['profile_name'][i],'utf-8')
    profile_names.append(profile_name)
    extend_prof = ma.getdata(CDF.variables['profile'][i])
    last = extend_prof[-1]
    print('last = ', last)
    extend_prof = np.append(extend_prof,last )
    profile_dict[profile_name] = extend_prof
    grid_name= str(CDF.variables['grid_name'][i],'utf-8')
    grid_names_dict[profile_name] = grid_name
    grid_dict[profile_name] = ma.getdata(CDF.variables['grid'][i])

if debug:
    print('prof_names = ' , profile_names)
    print('profile_dict = ' , profile_dict)
    print('grid_names = ' , grid_names_dict)
    print('grid_dict = ' , grid_dict)


# Global attributes defined in this CDF file
RAYS_run_label = CDF.RAYS_run_label
date_vector = list(CDF.date_vector)

global_attributes = [ ['CDF file = ', CDF_file_name],\
                      ['RAYS_run_label label = ', RAYS_run_label]]

#     global_attributes = [ ['CDF file = ', file],\
#                           ['RAYS_run_label label = ', RAYS_run_label], \
#                           ['date_vector = ', date_vector] ]

summary ={'file_name':CDF_file_name , 'global_attributes': global_attributes}
print('\n************ summary = ',summary)
plot_summary(summary)


#----------------------------------------------------------------------------------------------
# Plot all profiles vs grid
#----------------------------------------------------------------------------------------------
print('Plotting profiles \n')

for prof_name in profile_names:
    if debug:
        print('prof_name = ', prof_name)
#         q = [x for x in profile_dict[prof_name]]
#         print('q = ', q)

    xlabel = grid_names_dict[prof_name]
    ylabel = prof_name
    title = prof_name

    plot1 = XY_Curves_Fig(XY_curve(grid_dict[prof_name],profile_dict[prof_name]), title, xlabel, ylabel)
    plot_XY_Curves_Fig(plot1)

#----------------------------------------------------------------------------------------------
# Finalize
#----------------------------------------------------------------------------------------------

plot_index(index, 1)

close_file_XY_Curves_Fig()

if debug:
    print('index = ', index)