
Description of module: bin_to_uniform_grid_m

generic procedure: uniform grid binner to accumulate an extensive quantity, Q, into a
set of uniformly spaced bins in coordinate x (such as psi).  For example to discretize
the power absorbed from a wave as it propagates in space, giving the local profile of
power deposition in psi.
Input Q(:): Extensive quantity to be distributed over x bins.
Input xQ(:) Grid parameter vector of Q. -> N.B. size(xQ) must equal size(Q))
Input xmin: Scalar value of left edge of lowest bin
Input xmax: Scalar value of right edge of highest bin
Output binned_Q(:): intent(inout).  number of bins taken from size(binned_Q)
Notes:
If points xQ(;) are out of the binning range [xmin,xmax] ierr is set to 1 or 2 to let
user know there are points out of range (if they care) and the part of Q(:) that is out
of range is ignored.

Description of module: bisect_m

generic procedure: solve_bisection() to sole an equation by the bisection method.
This is slightly different in that it solves f(x)=y rather than f(x)=0
Usual caveats for non-linear solvers apply.  May fail if inverse function is
multi-valued in search domain.  There is no attempt to find multiple solutions.

f = objective function y = f(x)
x = solution
x0_in = lower search bound
x1_in = upper search bound
y = equation rhs
eps = error tolerance: ABS(f(x)-y) <= eps
ierr return:
ierr = -1 => (y(x1)-y(x0))(x1-x0) > 0 => no solution or multiple solutions in [x0,x1]
ierr = 0 => no convergence after max_iter iterations
ierr >= 1 => sucessful solution, ierr = number of iterations

Description of module: complete_elliptic_int_m

Calculates complete elliptic integrals using the argument convention E(m) and K(m).  See
Abramowitz and Stegan Section 17.3. These routines are extracted a more complete F90
code by John Burkhardt called "Elliptic_integral" which in turn was adap[ed from F77
by Bille Carlson, ACM algorithm 577.  The more complete code includes incomplete elliptic
integrals as well as the "k" argument convention.

N.B. I (DBB) have changed the name of Burkhardt's function "elliptic_fm" to
elliptic_Km which is more common usage i.e. agrees with Abramoitz and Stegun and
with Mathematica.

In order to put these functions in a module it was necessary to comment out the
declarations for functions "rd" and "rf" in subroutines elliptic_em(m) and
elliptic_fm(m).  The declarations shadowed "rd" and "rf" as being module functions.

Description of module: quad_trapezoid_m

generic procedure: trapezoid_quad, calculates integral from a vector of y
values, y(:), using simple trapezoidal approximation
generic procedure: trapezoid_quad_cumulative, calculates integral from a vector of y
values, y(:), using simple trapezoidal approximation and also returns the cumulative
integral at each grid point in a vector, cum(:) of length size(y).
Input x is either a fixed increment, h, or a vector of x(:) values (not necessarily
evenly spaced). x,y vector value can be real or complex, single precision or kind = rkind.

Description of module: vectors3_m

generic procedure: cross_product, calculates usual A x B
generic procedure: triple_product, calculates usual A dot B x C
generic procedure: triple_vector_product, calculates usual A x B x C

Description of module: zfunctions_m

A collection of routines to calculate plasma dispersion function by various methods
